name: CI Pipeline for the Backend and Frontend

on:
  pull_request:
    types: [opened, review_requested, synchronize]

jobs:
  backend:
    if: "!contains(github.event.pull_request.labels.*.name, 'ops') && !contains(github.head_ref, 'ops/')"
    strategy:
      matrix:
        node: ["22"]
        flavor: ["dev", "prod"]
      fail-fast: false
    runs-on: "ubuntu-latest"
    name: Backend (${{ matrix.flavor }}) - node ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ matrix.node }}/${{ matrix.flavor }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          registry-url: "https://registry.npmjs.org"

      - name: Read rust-toolchain file from repository
        id: gettoolchain
        run: echo "toolchain=$(cat ./rust/gbt/rust-toolchain)" >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}

      - name: Install ${{ steps.gettoolchain.outputs.toolchain }} Rust toolchain
        uses: dtolnay/rust-toolchain@315e265cd78dad1e1dcf3a5074f6d6c47029d5aa
        with:
          toolchain: ${{ steps.gettoolchain.outputs.toolchain }}

      - name: Install
        if: ${{ matrix.flavor == 'dev' }}
        run: npm ci
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/backend

      - name: Install (Prod dependencies only)
        if: ${{ matrix.flavor == 'prod' }}
        run: npm ci --omit=dev --omit=optional
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/backend

      - name: Lint
        if: ${{ matrix.flavor == 'dev' }}
        run: npm run lint
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/backend

      - name: Unit Tests
        if: ${{ matrix.flavor == 'dev' }}
        run: npm run test:ci
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/backend

      - name: Build
        run: npm run build
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/backend

  cache:
    name: "Cache assets for builds"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: assets

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Install (Prod dependencies only)
        run: npm ci --omit=dev --omit=optional
        working-directory: assets/frontend

      - name: Restore cached mining pool assets
        continue-on-error: true
        id: cache-mining-pool-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            mining-pool-assets.zip
          key: mining-pool-assets-cache

      - name: Restore promo video assets
        continue-on-error: true
        id: cache-promo-video-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            promo-video-assets.zip
          key: promo-video-assets-cache

      - name: Unzip assets before building (mining-pools)
        if: steps.cache-mining-pool-restore.outputs.cache-hit == 'true'
        continue-on-error: true
        run: unzip -o mining-pool-assets.zip -d assets/frontend/src/resources/mining-pools

      - name: Unzip assets before building (promo-video)
        if: steps.cache-promo-video-restore.outputs.cache-hit == 'true'
        continue-on-error: true
        run: unzip -o promo-video-assets.zip -d assets/frontend/src/resources/promo-video

      - name: Sync-assets
        run: npm run sync-assets-dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MEMPOOL_CDN: 1
          VERBOSE: 1
        working-directory: assets/frontend

      - name: Zip mining-pool assets
        run: zip -jrq mining-pool-assets.zip assets/frontend/src/resources/mining-pools/*

      - name: Zip promo-video assets
        run: zip -jrq promo-video-assets.zip assets/frontend/src/resources/promo-video/*

      - name: Upload mining pool assets as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mining-pool-assets
          path: mining-pool-assets.zip

      - name: Upload promo video assets as artifact
        uses: actions/upload-artifact@v4
        with:
          name: promo-video-assets
          path: promo-video-assets.zip

      - name: Save mining pool assets cache
        id: cache-mining-pool-save
        uses: actions/cache/save@v4
        with:
          path: |
            mining-pool-assets.zip
          key: mining-pool-assets-cache

      - name: Save promo video assets cache
        id: cache-promo-video-save
        uses: actions/cache/save@v4
        with:
          path: |
            promo-video-assets.zip
          key: promo-video-assets-cache

  frontend:
    needs: cache
    if: "!contains(github.event.pull_request.labels.*.name, 'ops') && !contains(github.head_ref, 'ops/')"
    strategy:
      matrix:
        node: ["22"]
        flavor: ["dev", "prod"]
      fail-fast: false
    runs-on: "ubuntu-latest"
    name: Frontend (${{ matrix.flavor }}) - node ${{ matrix.node }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ matrix.node }}/${{ matrix.flavor }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          registry-url: "https://registry.npmjs.org"

      - name: Install (Prod dependencies only)
        if: ${{ matrix.flavor == 'prod' }}
        run: npm ci --omit=dev --omit=optional
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/frontend

      - name: Install
        if: ${{ matrix.flavor == 'dev' }}
        run: npm ci
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/frontend

      - name: Lint
        if: ${{ matrix.flavor == 'dev' }}
        run: npm run lint
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/frontend

      - name: Restore cached mining pool assets
        continue-on-error: true
        id: cache-mining-pool-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            mining-pool-assets.zip
          key: mining-pool-assets-cache

      - name: Restore promo video assets
        continue-on-error: true
        id: cache-promo-video-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            promo-video-assets.zip
          key: promo-video-assets-cache

      - name: Download artifact (mining-pool-assets)
        uses: actions/download-artifact@v4
        with:
          name: mining-pool-assets

      - name: Unzip assets (mining-pools)
        run: unzip -o mining-pool-assets.zip -d ${{ matrix.node }}/${{ matrix.flavor }}/frontend/src/resources/mining-pools

      - name: Download artifact (promo-video-assets)
        uses: actions/download-artifact@v4
        with:
          name: promo-video-assets

      - name: Unzip assets (promo-video)
        run: unzip -o promo-video-assets.zip -d ${{ matrix.node }}/${{ matrix.flavor }}/frontend/src/resources/promo-video

      - name: Display resulting source tree
        run: ls -R

      - name: Build
        run: npm run build
        working-directory: ${{ matrix.node }}/${{ matrix.flavor }}/frontend
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MEMPOOL_CDN: 1
          VERBOSE: 1

  e2e-mempool:
    if: "!contains(github.event.pull_request.labels.*.name, 'ops') && !contains(github.head_ref, 'ops/')"
    runs-on: "ubuntu-latest"
    needs: frontend
    name: E2E tests for mempool
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Run tests
        uses: './.github/actions/e2e-common'
        with:
          module: "mempool"
          node-version: "22"
          cypress-spec: "cypress/e2e/mainnet/*.spec.ts,cypress/e2e/signet/*.spec.ts"
          cypress-env: ""

  e2e-liquid:
    if: "!contains(github.event.pull_request.labels.*.name, 'ops') && !contains(github.head_ref, 'ops/')"
    runs-on: "ubuntu-latest"
    needs: frontend
    name: E2E tests for liquid
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Run tests
        uses: './.github/actions/e2e-common'
        with:
          module: "liquid"
          node-version: "22"
          cypress-spec: "cypress/e2e/liquid/liquid.spec.ts,cypress/e2e/liquidtestnet/liquidtestnet.spec.ts"
          cypress-env: ""

  e2e-testnet4:
    if: "!contains(github.event.pull_request.labels.*.name, 'ops') && !contains(github.head_ref, 'ops/')"
    runs-on: "ubuntu-latest"
    needs: frontend
    name: E2E tests for testnet4
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Run tests
        uses: './.github/actions/e2e-common'
        with:
          module: "testnet4"
          node-version: "22"
          cypress-spec: "cypress/e2e/testnet4/*.spec.ts"
          cypress-env: "true"

  validate_docker_json:
    if: "!contains(github.event.pull_request.labels.*.name, 'ops') && !contains(github.head_ref, 'ops/')"
    runs-on: "ubuntu-latest"
    name: Validate generated backend Docker JSON
    steps: 
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: docker
      
      - name: Install jq
        run: sudo apt-get install jq -y

      - name: Create new start script to run on CI
        run: |
          sed '$d' start.sh > start_ci.sh
        working-directory: docker/docker/backend

      - name: Run the script to generate the sample JSON
        run: sh start_ci.sh
        working-directory: docker/docker/backend

      - name: Validate JSON syntax
        run: cat mempool-config.json | jq
        working-directory: docker/docker/backend